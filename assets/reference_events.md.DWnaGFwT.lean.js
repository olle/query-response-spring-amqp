import{_ as e,c as s,a2 as d,o as i}from"./chunks/framework.DYGJpL-T.js";const u=JSON.parse('{"title":"Query/Response Events","description":"","frontmatter":{},"headers":[],"relativePath":"reference/events.md","filePath":"reference/events.md","lastUpdated":1748507583000}'),a={name:"reference/events.md"};function n(o,t,r,l,p,c){return i(),s("div",null,t[0]||(t[0]=[d(`<h1 id="query-response-events" tabindex="-1">Query/Response Events <a class="header-anchor" href="#query-response-events" aria-label="Permalink to &quot;Query/Response Events&quot;">​</a></h1><h2 id="metrics-or-stats" tabindex="-1">Metrics or &quot;Stats&quot; <a class="header-anchor" href="#metrics-or-stats" aria-label="Permalink to &quot;Metrics or &quot;Stats&quot;&quot;">​</a></h2><p>Participating nodes in a Query/Response topology will broadcast events of structured statistics for the UI and monitoring applications to consume. The common data-shape encapsulates a way to communicate measurements, events, and node-identifying and describing meta-data.</p><p>The entry structure and format is encoded as a JSON UTF-8 encoded string.</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;elements&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;string&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;string|number|boolean&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;timestamp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;OPTIONAL:number&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;uuid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;OPTIONAL:string&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The <code>key</code> and <code>value</code> property pairs are used to encode any measurement. The <code>timestamp</code> is an optional property, that can be used to associate a measurement with a point in time since the EPOCH, in milliseconds.</p><p>The <code>uuid</code> property is used to identify the publishing node during its lifetime—effectively creating an aggregate for statistics to present. This means that in practice there are operational metrics which may <em>come and go</em> as well as logical statistics which may pertain to the topology or cluster of nodes.</p><h3 id="table-of-published-statistics" tabindex="-1">Table of published statistics <a class="header-anchor" href="#table-of-published-statistics" aria-label="Permalink to &quot;Table of published statistics&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Key</th><th>Value</th><th>Timestamp</th><th>UUID</th><th>Description</th></tr></thead><tbody><tr><td><code>name</code></td><td>string</td><td>-</td><td>✓</td><td>Name or identity of the node, or <code>application</code></td></tr><tr><td><code>pid</code></td><td>string</td><td>-</td><td>✓</td><td>Node process id, or <code>-</code></td></tr><tr><td><code>host</code></td><td>string</td><td>-</td><td>✓</td><td>Node hostname, or <code>unknown</code></td></tr><tr><td><code>uptime</code></td><td>string</td><td>-</td><td>✓</td><td>Node uptime, or <code>-</code></td></tr><tr><td><code>only_responses</code></td><td>boolean</td><td>-</td><td>✓</td><td>Whether node has only responded <code>true</code>, or published queries <code>false</code></td></tr><tr><td><code>count_queries</code></td><td>number</td><td>-</td><td>✓</td><td>Number of published queries</td></tr><tr><td><code>count_consumed_responses</code></td><td>number</td><td>-</td><td>✓</td><td>Number of consumed responses</td></tr><tr><td><code>count_published_responses</code></td><td>number</td><td>-</td><td>✓</td><td>Number of published responses</td></tr><tr><td><code>count_fallbacks</code></td><td>number</td><td>-</td><td>✓</td><td>Number of <em>fallbacks</em> (no responses)</td></tr><tr><td><code>max_latency</code></td><td>number</td><td>-</td><td>✓</td><td>Largest recorded time between query and response, in milliseconds</td></tr><tr><td><code>min_latency</code></td><td>number</td><td>-</td><td>✓</td><td>Smallest recorded time between query and response, in milliseconds</td></tr><tr><td><code>avg_latency</code></td><td>number</td><td>-</td><td>✓</td><td>Average time between query and response, in milliseconds</td></tr><tr><td><code>throughput_queries</code></td><td>number</td><td>✓</td><td>✓</td><td>Number of queries published, since last notification</td></tr><tr><td><code>throughput_responses</code></td><td>number</td><td>✓</td><td>✓</td><td>Number of responses consumed, since last notification</td></tr></tbody></table>`,9)]))}const m=e(a,[["render",n]]);export{u as __pageData,m as default};
