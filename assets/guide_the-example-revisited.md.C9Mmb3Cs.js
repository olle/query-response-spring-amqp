import{_ as e,c as s,o as a,a3 as t}from"./chunks/framework.Bsyxd66g.js";const m=JSON.parse('{"title":"The example revisited","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/the-example-revisited.md","filePath":"guide/the-example-revisited.md","lastUpdated":1720465254000}'),o={name:"guide/the-example-revisited.md"},n=t(`<h1 id="the-example-revisited" tabindex="-1">The example revisited <a class="header-anchor" href="#the-example-revisited" aria-label="Permalink to &quot;The example revisited&quot;">​</a></h1><p>Let&#39;s examine one of the most powerful aspects of using the Query/Response pattern. If we think back to our <a href="./what-is-query-response.html">initial example</a> we published a query for books in the sci-fi genre.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>query: books.sci-fi</span></span>
<span class="line"><span>reply-to: library/books.sci-fi#42</span></span></code></pre></div><p>We also learned that responses may come from different sources, with different payloads and we are responsible for dealing with validation and duplicates etc.</p><p>The query in this example uses only some minimal semantics to express the genre of books requested, the term <code>sci-fi</code>. This is part of a contract from our domain, together with rules on how any result payload should be presented. The list of strings within quotes are not by accident, it is also by design.</p><p>The Query/Response pattern does not enforce any structural rules for query, address or response syntax. This must come from designers and developers. <em>I would suggest, using <a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noreferrer">Domain Driven Design</a> to leverage the power of a ubiquitous language in the queries</em>.</p><p>All this together puts us in a position to allow change and evolution in our system.</p><h2 id="a-better-library-protocol" tabindex="-1">A better library protocol <a class="header-anchor" href="#a-better-library-protocol" aria-label="Permalink to &quot;A better library protocol&quot;">​</a></h2><p>We have agreed on supporting <em>stars</em> for book ratings, and different teams scramble to their stations to extend for the new feature.</p><p>We saw earlier that data returned was formed as a list of quoted strings, and the contract for parsing was: &quot;first quoted string per line is book title&quot;.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>body:</span></span>
<span class="line"><span>    &quot;Neuromancer&quot;</span></span></code></pre></div><p>That rule and the capability to extend it, made it possible to agree on a new optional format: &quot;trailing key-values are properties&quot;. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>body:</span></span>
<span class="line"><span>    &quot;Neuromancer&quot; isbn:9780307969958 stars:4</span></span></code></pre></div><p>This is great. Let&#39;s get to work.</p><h2 id="top-3-books-have-stars" tabindex="-1">Top-3 books have stars <a class="header-anchor" href="#top-3-books-have-stars" aria-label="Permalink to &quot;Top-3 books have stars&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>query: books.sci-fi</span></span>
<span class="line"><span>reply-to: library/books.sci-fi#77</span></span></code></pre></div><p>At a later time a new query for science fiction books is published. Now, we still must not assume anything about the service or collaborator publishing the query. It may be that we have a new service running in our system, not yet live, or an updated version of the first one - we don&#39;t need to know.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>response: library/books.sci-fi#77</span></span>
<span class="line"><span>body:</span></span>
<span class="line"><span>    &quot;Neuromancer&quot; stars:3</span></span>
<span class="line"><span>    &quot;Snow Crash&quot; stars:5</span></span>
<span class="line"><span>    &quot;I, Robot&quot; stars:4</span></span></code></pre></div><p>The first response looks great, it&#39;s using the new extended protocol and provides star-ratings with the top-3 sci-fi book list.</p><h2 id="one-of-each-flavour" tabindex="-1">One of each flavour <a class="header-anchor" href="#one-of-each-flavour" aria-label="Permalink to &quot;One of each flavour&quot;">​</a></h2><p>Another response is consumed:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>response: library/books.sci-fi#77</span></span>
<span class="line"><span>body:</span></span>
<span class="line"><span>    &quot;I, Robot&quot;</span></span>
<span class="line"><span>    &quot;The Gods Themselves&quot;</span></span>
<span class="line"><span>    &quot;Pebble in the Sky&quot;</span></span></code></pre></div><p>Oh, ok seems that we&#39;ve received a response with only Asimov books again, and sadly no stars. Luckily the protocol rules allows us to still use the response if we choose to.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>response: library/books.sci-fi#77</span></span>
<span class="line"><span>body:</span></span>
<span class="line"><span>    &quot;I, Robot&quot; stars:2</span></span>
<span class="line"><span>    &quot;The Gods Themselves&quot;</span></span>
<span class="line"><span>    &quot;Pebble in the Sky&quot; stars:5</span></span></code></pre></div><p>And what is this now. We&#39;ve consumed yet another response and it appears to be the Asimov list again, but this time with star-ratings, but only for a few titles.</p><p>This is quite normal and shows us a really important and valuable aspect of the Query/Response pattern. If we would pull the curtain back a bit, it could be reasonable to assume that the publisher of Asimov books now exists in 2 distinct versions. One supports the new updated format, and has a couple of star-ratings set. The other appears to be the <em>older</em> version.</p><p>We have effectively seen how response publishers can evolve, and even exist side-by-side, if care is taken to design a suitable payload protocol.</p><p><em>The backward compatibility of the payload format is not at all required in the Query/Response pattern. Implementations could use version tags or classifiers to check for compatibility at the consumer side.</em></p><div class="warning custom-block"><p class="custom-block-title">Important!</p><p>The key point here is, the consumer is still responsible for asserting the usefulness and value of the response information. Parsing, validating or checking for version compatibility is required.</p></div><h2 id="out-with-the-old" tabindex="-1">Out with the old <a class="header-anchor" href="#out-with-the-old" aria-label="Permalink to &quot;Out with the old&quot;">​</a></h2><p>Let&#39;s jump forward and say that at some later time, the query for sci-fi books is published again.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>query: books.sci-fi</span></span>
<span class="line"><span>reply-to: library/books.sci-fi#88</span></span></code></pre></div><p>And this time, the only consumed response with Asimov books is the following:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>response: library/books.sci-fi#88</span></span>
<span class="line"><span>body:</span></span>
<span class="line"><span>    &quot;I, Robot&quot; stars:3</span></span>
<span class="line"><span>    &quot;The Gods Themselves&quot; stars:3</span></span>
<span class="line"><span>    &quot;Pebble in the Sky&quot; stars:5</span></span></code></pre></div><p>We can almost certainly conclude that the original version of the Asimov book service has been shut down.</p><p>Again we can see how the Query/Response pattern helps in coping with a natural evolution of the system. Services can be added, removed or upgraded at any time.</p>`,36),i=[n];function p(r,l,h,d,c,u){return a(),s("div",null,i)}const g=e(o,[["render",p]]);export{m as __pageData,g as default};
