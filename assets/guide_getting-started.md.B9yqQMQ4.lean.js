import{B as n}from"./chunks/attributes.BUGtF-W3.js";import{c as l,j as i,a,t,a2 as e,o as h}from"./chunks/framework.DYGJpL-T.js";const g=JSON.parse('{"title":"Getting Started","description":"","frontmatter":{},"headers":[],"relativePath":"guide/getting-started.md","filePath":"guide/getting-started.md","lastUpdated":1720849524000}'),p={name:"guide/getting-started.md"},E=Object.assign(p,{setup(k){return(r,s)=>(h(),l("div",null,[s[26]||(s[26]=i("h1",{id:"getting-started",tabindex:"-1"},[a("Getting Started "),i("a",{class:"header-anchor",href:"#getting-started","aria-label":'Permalink to "Getting Started"'},"​")],-1)),i("p",null,t(n)+" makes it really easy to extend Spring Boot stand-alone, production-grade applications, that are using Spring AMQP. We have taken a working pattern for building highly decoupled evolving service architectures, and wrapped it in a developer friendly library.",1),s[27]||(s[27]=i("h2",{id:"system-requirements",tabindex:"-1"},[a("System Requirements "),i("a",{class:"header-anchor",href:"#system-requirements","aria-label":'Permalink to "System Requirements"'},"​")],-1)),i("p",null,[a(t(n)+" requires at least ",1),s[0]||(s[0]=i("strong",null,"Spring Boot 2.x",-1)),s[1]||(s[1]=a(" and ")),s[2]||(s[2]=i("strong",null,"Java 11",-1)),s[3]||(s[3]=a(", and should work for later releases too. We are building and running it successfully with ")),s[4]||(s[4]=i("strong",null,"Java 11",-1)),s[5]||(s[5]=a(" and the ")),s[6]||(s[6]=i("strong",null,"Spring Boot 3.0.3",-1)),s[7]||(s[7]=a(" version."))]),s[28]||(s[28]=e('<h2 id="installation-amp-configuration" tabindex="-1">Installation &amp; Configuration <a class="header-anchor" href="#installation-amp-configuration" aria-label="Permalink to &quot;Installation &amp;amp; Configuration&quot;">​</a></h2><p>It is distributed as a <a href="https://maven.apache.org" target="_blank" rel="noreferrer">Maven</a> dependency, and is known to work well with Maven 3.3+. Using the dependency with <a href="https://gradle.org" target="_blank" rel="noreferrer">Gradle</a> should work too. Please see the <a href="https://github.com/olle/query-response-spring-amqp#quickstart" target="_blank" rel="noreferrer">Quickstart</a> information, available on the project <a href="https://github.com/olle/query-response-spring-amqp" target="_blank" rel="noreferrer">Github page</a>, for information on how to get the Maven dependency.</p>',2)),i("p",null,[a("Enabling "+t(n)+" is done by loading the ",1),s[8]||(s[8]=i("code",null,"QueryResponseConfiguration",-1)),s[9]||(s[9]=a(" class. The most simple way to do this, is by annotating your Spring Boot application with the ")),s[10]||(s[10]=i("code",null,"@EnableQueryResponse",-1)),s[11]||(s[11]=a(" annotation."))]),s[29]||(s[29]=e(`<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EnableQueryResponse</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        SpringApplication.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyApp.class, args);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>NOTE: This annotation will do nothing more but to import the <code>QueryResponseConfiguration</code> class.</p><p>That&#39;s it! There is no more infrastructure code, wiring or setup that needs to be done. <strong>It&#39;s just that easy.</strong></p><h3 id="connecting-to-an-amqp-broker" tabindex="-1">Connecting to an AMQP broker <a class="header-anchor" href="#connecting-to-an-amqp-broker" aria-label="Permalink to &quot;Connecting to an AMQP broker&quot;">​</a></h3>`,4)),i("p",null,[a("Before you can run your application you need to make sure there is an AMQP broker available. By default "+t(n)+" tries to connect to a ",1),s[12]||(s[12]=i("a",{href:"https://www.rabbitmq.com",target:"_blank",rel:"noreferrer"},"https://www.rabbitmq.com",-1)),s[13]||(s[13]=a("[RabbitMQ], running locally on port ")),s[14]||(s[14]=i("code",null,"5672",-1)),s[15]||(s[15]=a("."))]),s[30]||(s[30]=e('<p>Start an and run RabbitMQ using <code>docker</code>:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 5672:5672</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 15672:15672</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rabbitmq:3-management</span></span></code></pre></div><p>NOTE: The <code>3-management</code> tag will enable the RabbitMQ Management UI. When the broker is running, it can be accessed at <a href="http://localhost:15672" target="_blank" rel="noreferrer">http://localhost:15672</a> with username and password <code>guest/guest</code>.</p>',3)),i("p",null,"Now running your application, will enable "+t(n)+", connect to the broker and create all the resources necessary on the broker.",1),s[31]||(s[31]=e('<div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mvn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spring-boot:run</span></span></code></pre></div>',1)),i("p",null,[s[16]||(s[16]=a("Now is a good time to use the RabbitMQ Management UI, available at ")),s[17]||(s[17]=i("a",{href:"http://localhost:15672",target:"_blank",rel:"noreferrer"},"http://localhost:15672",-1)),a(", to inspect the exchange, queues and bindings created by "+t(n)+" by default.",1)]),s[32]||(s[32]=i("h2",{id:"queries",tabindex:"-1"},[a("Queries "),i("a",{class:"header-anchor",href:"#queries","aria-label":'Permalink to "Queries"'},"​")],-1)),s[33]||(s[33]=i("p",null,[a("Publishing "),i("strong",null,"queries"),a(" is a way for your application to ask for information that it may need in order to accomplish tasks. Queries express a "),i("em",null,"need"),a(", and are not addressed to any specific service or component.")],-1)),i("p",null,[a(t(n)+" makes it really really easy, to create and publish a query using the ",1),s[18]||(s[18]=i("code",null,"QueryBuilder",-1)),s[19]||(s[19]=a("."))]),s[34]||(s[34]=e(`<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Queries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    QueryBuilder queryBuilder;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Order</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationReadyEvent.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Collection&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; polos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            queryBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">queryFor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;marco&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, String.class) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;1&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">waitingFor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;2&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">orEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;3&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        polos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;marco? &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">concat).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(System.out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">println);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">Note</p><p>We are using the <code>@Order</code> annotation in our example only to ensure that responses are built and registered before queries, when they are built in one and the same app.</p></div><div class="tip custom-block"><p class="custom-block-title">&lt;1&gt;</p><p>Initiates a query for the term <code>marco</code>, with any results being consumed as, or <em>mapped</em> to, the type <code>String.class</code>. Returned results are always gathered in a collection. Either <strong>none, one or many</strong> elements may be returned.</p></div><div class="tip custom-block"><p class="custom-block-title">&lt;2&gt;</p><p>Queries require a timeout, here we set it to <code>1000L</code> milliseconds. This means that this specific query will <strong>always</strong> block for 1 second.</p></div><div class="tip custom-block"><p class="custom-block-title">&lt;3&gt;</p><p>The query may not receive any responses, so it <em>always</em> needs to specify how that case should be handled. Default here is an empty collection, of the declared return type <code>String.class</code>.</p></div><p><em>Hopefully this shows, how concise and powerful the <code>QueryBuilder</code> is, dealing with results mapping, fault tolerance and default values in just a couple of lines of code.</em></p><p>If you run the application now, it will publish a <strong>query</strong> to the message broker, which we can see in the logs.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mvn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spring-boot:run</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c.s.queryresponse.RabbitFacade</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-- Published query: marco - (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Body:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;{}&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MessageProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [headers={x-qr-published</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1589642002076</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, replyTo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">94f0fff4-c4f3-4491-831d-00809edb6f95,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">application/json,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentLength</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">2,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deliveryMode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">NON_PERSISTENT,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> priority</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deliveryTag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><p>At the moment there are no responses to be consumed, so after blocking for 1 second, nothing is printed <code>STDOUT</code>.</p><h2 id="responses" tabindex="-1">Responses <a class="header-anchor" href="#responses" aria-label="Permalink to &quot;Responses&quot;">​</a></h2>`,10)),i("p",null,[s[20]||(s[20]=a("Building services, medium, large or ")),s[21]||(s[21]=i("em",null,"micro",-1)),s[22]||(s[22]=a(" (who cares), that publish ")),s[23]||(s[23]=i("strong",null,"responses",-1)),a(" to queries is also really easy with "+t(n)+", using the ",1),s[24]||(s[24]=i("code",null,"ResponseBuilder",-1)),s[25]||(s[25]=a("."))]),s[35]||(s[35]=e(`<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Responses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ResponseBuilder responseBuilder;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Order</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationReadyEvent.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        responseBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;marco&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, String.class) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;1&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;2&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;polo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;yolo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;3&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">&lt;1&gt;</p><p>Initializes a response to queries for <code>marco</code>, providing the type-hint on how to map entries in the response. Set to <code>String.class</code> here.</p></div><div class="tip custom-block"><p class="custom-block-title">&lt;2&gt;</p><p>The response <code>withAll()</code> will publish all elements in one single response.</p></div><div class="tip custom-block"><p class="custom-block-title">&lt;3&gt;</p><p>And finally this response is provided the elements <code>&quot;polo&quot;, &quot;yolo&quot;</code> as the actual data to publish. <em>The builder varags method, used here, is mostly for trying out Query/Response, or for static responses.</em></p></div><p><em>Again, the builder makes it really easy to create a responding service, without any special setup or complicated configurations.</em></p><p>Now if you run the application again, with the response component registered before the query publisher, it will publish the response.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mvn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spring-boot:run</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c.s.queryresponse.RabbitFacade</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-- Published query: marco - (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Body:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;{}&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MessageProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [headers={x-qr-published</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1589642489894</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, replyTo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">c77a8a1d-c959-4f2a-bd51-85b7e6b5b69b,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">application/json,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentLength</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">2,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deliveryMode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">NON_PERSISTENT,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> priority</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deliveryTag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c.s.queryresponse.Response</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Consumed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> query:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> marco</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c.s.queryresponse.RabbitFacade</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-- Published response: c77a8a1d-c959-4f2a-bd51-85b7e6b5b69b - (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Body:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;{&quot;elements&quot;:[&quot;polo&quot;,&quot;yolo&quot;]}&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MessageProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [headers={x-qr-published</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1589642489941</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, contentType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">application/json,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentEncoding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">UTF-8,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentLength</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">28,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deliveryMode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">NON_PERSISTENT,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> priority</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deliveryTag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c.s.queryresponse.Query</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Received</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> response</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> message:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MessageProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [headers={x-qr-published</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1589642489941</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, contentType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">application/json,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentEncoding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">UTF-8,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentLength</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> receivedDeliveryMode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">NON_PERSISTENT,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> priority</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> redelivered</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">false,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> receivedExchange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> receivedRoutingKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">c77a8a1d-c959-4f2a-bd51-85b7e6b5b69b,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deliveryTag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> consumerTag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">amq.ctag-Q_ghWp4TWU9EYhi_rqErcg,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> consumerQueue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">c77a8a1d-c959-4f2a-bd51-85b7e6b5b69b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">marco?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> polo</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">marco?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yolo</span></span></code></pre></div><p>Now you can see a full roundtrip of the <strong>query</strong> being published and consumed, and the <strong>response</strong> being published and also consumed. And the finished output is &quot;polo&quot; and &quot;yolo&quot; printed on <code>STDOUT</code>.</p>`,8))]))}});export{g as __pageData,E as default};
